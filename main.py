import requests
from bs4 import BeautifulSoup
import logging
import time
import random
from openpyxl import Workbook
from tqdm import tqdm, tqdm as tqdm_module


MINIMUM_MEMBERS = 1000


# Logging handler compatible with tqdm
class TqdmCompatibleHandler(logging.StreamHandler):
    def emit(self, record):
        try:
            msg = self.format(record)
            tqdm_module.write(msg)
            self.flush()
        except Exception:
            self.handleError(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("parser.log", mode="w", encoding="utf-8")
file_handler.setFormatter(
    logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
)

handler = TqdmCompatibleHandler()
formatter = logging.Formatter("%(message)s")
handler.setFormatter(formatter)
logging.getLogger().handlers = [handler, file_handler]
logging.getLogger().setLevel(logging.INFO)


def gather_channel_links(url):
    links = []
    logging.info(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
    time.sleep(random.uniform(1, 3))
    html = requests.get(url)
    bs = BeautifulSoup(html.text, "html.parser")

    channel_link_tags = bs.find_all("div", class_="tg-channel-link")
    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channel_link_tags)} –±–ª–æ–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
    for cl in channel_link_tags:
        channel_link = cl.find("a")
        if channel_link:
            channel_url = channel_link.get("href")
            channel_parent_div = cl.find_parent("div")
            members_count = int(
                channel_parent_div.find("span", {"class": "tg-user-count"})
                .get_text()
                .strip()
            )
            if members_count <= MINIMUM_MEMBERS:
                logging.info(
                    f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {members_count} < {MINIMUM_MEMBERS}"
                )
                continue
            else:
                if channel_url not in links:
                    links.append(channel_url)
                    logging.info(
                        f"üåê –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://tgramsearch.com{channel_url}"
                    )
    logging.info(f"üì¶ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(links)}")
    return [f"https://tgramsearch.com{link}" for link in links]


def extract_data(url):
    logging.info(f"üîó –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
    time.sleep(random.uniform(1, 3))
    html = requests.get(url)
    bs = BeautifulSoup(html.text, "html.parser")

    channel_card_div = bs.find(
        "div", {"class": ["tg-channel-wrapper", "is-detail"]}
    )
    if channel_card_div:
        channel_link = channel_card_div.find("a", {"class": "app"})
        if channel_link:
            channel_url = channel_link.attrs["href"].replace(
                "tg://resolve?domain=", "@"
            )
            channel_name = (
                channel_card_div.find("h1", {"class": "tg-channel-header"})
                .get_text()
                .strip()
            )
            members_count = int(
                channel_card_div.find("span", {"class": "tg-user-count"})
                .get_text()
                .strip()
            )
            logging.info(
                f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª: {channel_url}"
            )
            return channel_url, channel_name, members_count
        else:
            logging.warning(
                f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {url}"
            )
    else:
        logging.warning(
            f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {url}"
        )


def get_channel_data(channel_url):
    logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {channel_url}")
    links = []
    gathered_links = []
    page_num = 1
    url = f"{channel_url}?page={page_num}"
    while True:
        old_len = len(gathered_links)
        time.sleep(random.uniform(1, 3))
        page_links = gather_channel_links(url)
        for p in page_links:
            if p not in gathered_links:
                gathered_links.append(p)
        new_len = len(gathered_links)
        logging.info(
            f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –≤—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(gathered_links)}"
        )
        if old_len == new_len:
            break
        page_num += 1
        url = f"{channel_url}?page={page_num}"

    logging.info(
        f"üìö –ó–∞–≤–µ—Ä—à—ë–Ω —Å–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(gathered_links)} —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )
    logging.info("üéØ –ó–∞–∫–æ–Ω—á–µ–Ω —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö URL")
    for link in tqdm(
        gathered_links, desc="üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö"
    ):
        data = extract_data(link)
        if data and data not in links:
            links.append(data)
    return links


def write_xlsx(links: list, category: str) -> None:
    wb = Workbook()
    ws = wb.active
    ws.title = category

    ws.append(
        ["–°—Å—ã–ª–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"]
    )

    for url, name, members in links:
        ws.append([url, name, category, members])

    filename = f"{category}_channels.xlsx"
    wb.save(filename)
    logging.info(f"üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def main():
    category_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
    logging.info("üß† –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    links = get_channel_data("https://tgramsearch.com/categories/it")
    logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Telegram-—Å—Å—ã–ª–æ–∫: {len(links)}")
    write_xlsx(links, category_name)
    logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


if __name__ == "__main__":
    main()
